// <auto-generated />
using System;
using Alojamiento.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alojamiento.Infrastructure.Migrations
{
    [DbContext(typeof(AlojamientoDbContext))]
    [Migration("20240503145537_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alojamiento.Domain.Entities.CiudadEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "050001",
                            Descripcion = "Medellín"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "11001",
                            Descripcion = "Bogotá"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "08001",
                            Descripcion = "Barranquilla"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "47001",
                            Descripcion = "Santa Marta"
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "13001",
                            Descripcion = "Cartagena"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ClienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<int>("IdGenero")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Documento = "1128436325",
                            Email = "jeison9101@gmail.com",
                            FechaNacimiento = new DateTime(1991, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdGenero = 2,
                            IdTipoDocumento = 13,
                            Nombre = "Jeison Cañas",
                            Telefono = "3137653881"
                        },
                        new
                        {
                            Id = 2,
                            Documento = "1023468549",
                            Email = "carlos@example.com",
                            FechaNacimiento = new DateTime(1994, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdGenero = 2,
                            IdTipoDocumento = 13,
                            Nombre = "Carlos Perez",
                            Telefono = "3012568423"
                        },
                        new
                        {
                            Id = 3,
                            Documento = "1165794321",
                            Email = "cata21@example.com",
                            FechaNacimiento = new DateTime(1998, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdGenero = 1,
                            IdTipoDocumento = 13,
                            Nombre = "Catalina Cifuentes",
                            Telefono = "3104526981"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.GeneroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Femenino"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Masculino"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Otro"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HabitacionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostoBase")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnOrder(2);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<int>("IdHotel")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("IdTipoHabitacion")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("IdUbicacion")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnOrder(3);

                    b.Property<int>("NumeroPersonas")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdTipoHabitacion");

                    b.HasIndex("IdUbicacion");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HotelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("Hoteles");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HuespedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<int>("IdGenero")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("IdHuesped")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdHuesped");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("Huespedes");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ReservaHuespedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdHuesped")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("IdReserva")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdReserva");

                    b.ToTable("ReservaHuespedes");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ReservasEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("IdHabitacion")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("NombreContactoEmergencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("TelefonoEmergencia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdHabitacion");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.TipoDocumentoEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TipoDocumentos");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Descripcion = "Registro civil de nacimiento"
                        },
                        new
                        {
                            Id = 12,
                            Descripcion = "Tarjeta de identidad"
                        },
                        new
                        {
                            Id = 13,
                            Descripcion = "Cédula de ciudadanía"
                        },
                        new
                        {
                            Id = 21,
                            Descripcion = "Tarjeta de extranjería"
                        },
                        new
                        {
                            Id = 22,
                            Descripcion = "Cédula de extranjería"
                        },
                        new
                        {
                            Id = 31,
                            Descripcion = "NIT"
                        },
                        new
                        {
                            Id = 41,
                            Descripcion = "Pasaporte"
                        },
                        new
                        {
                            Id = 42,
                            Descripcion = "Tipo de documento extranjero"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.TipoHabitacionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TipoHabitaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Suite"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Junior suite"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Individuales"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Dobles"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Familiares"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.UbicacionHabitacionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("UbicacionHabitaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Centro Balcon"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Esquina balcon"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Centro sin balcon"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Esquina sin balcon"
                        });
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ClienteEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.GeneroEntity", "generoEntity")
                        .WithMany()
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.TipoDocumentoEntity", "tipoDocumentoEntity")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generoEntity");

                    b.Navigation("tipoDocumentoEntity");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HabitacionEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.HotelEntity", "hotelEntity")
                        .WithMany("Habitaciones")
                        .HasForeignKey("IdHotel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.TipoHabitacionEntity", "tipoHabitacionEntity")
                        .WithMany()
                        .HasForeignKey("IdTipoHabitacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.UbicacionHabitacionEntity", "ubicacionHabitacionEntity")
                        .WithMany()
                        .HasForeignKey("IdUbicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hotelEntity");

                    b.Navigation("tipoHabitacionEntity");

                    b.Navigation("ubicacionHabitacionEntity");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HotelEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.CiudadEntity", "Ciudad")
                        .WithMany()
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.TipoDocumentoEntity", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HuespedEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.GeneroEntity", "generoEntity")
                        .WithMany()
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.ReservaHuespedEntity", null)
                        .WithMany("Huespedes")
                        .HasForeignKey("IdHuesped");

                    b.HasOne("Alojamiento.Domain.Entities.TipoDocumentoEntity", "tipoDocumentoEntity")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generoEntity");

                    b.Navigation("tipoDocumentoEntity");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ReservaHuespedEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.ReservasEntity", "Reserva")
                        .WithMany()
                        .HasForeignKey("IdReserva")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ReservasEntity", b =>
                {
                    b.HasOne("Alojamiento.Domain.Entities.ClienteEntity", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alojamiento.Domain.Entities.HabitacionEntity", "Habitacion")
                        .WithMany("Reservas")
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Habitacion");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HabitacionEntity", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.HotelEntity", b =>
                {
                    b.Navigation("Habitaciones");
                });

            modelBuilder.Entity("Alojamiento.Domain.Entities.ReservaHuespedEntity", b =>
                {
                    b.Navigation("Huespedes");
                });
#pragma warning restore 612, 618
        }
    }
}
